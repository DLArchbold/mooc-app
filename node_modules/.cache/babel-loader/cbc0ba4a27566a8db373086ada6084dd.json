{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\WJ\\\\Desktop\\\\Georgia Tech\\\\Fall 2022\\\\CS 8803 MAS (Special Topics) - Mobile Applications and Services\\\\Assignment\\\\mooc-app\\\\mooc-app\\\\src\\\\components\\\\mooc\\\\CommentComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport moment from 'moment/moment';\nimport AuthenticationService from './AuthenticationService';\nimport CommentDataService from '../../api/comment/CommentDataService.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CommentComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.params.id,\n      description: \"\",\n      inResponseTo: \"\",\n      targetDate: moment(new Date()).format('YYYY-MM-DD'),\n      username: \"\"\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  } //When Updating(PUT) or Creating(POST) comments\n\n\n  onSubmit(values) {\n    let username = AuthenticationService.getLoggedInUserName();\n    console.log(\"state.id\" + this.state.id);\n\n    if (this.state.id === -1) {\n      console.log(\"in create\");\n      CommentDataService.createComment(username, {\n        //Use state values for those which are carried over from ListComments\n        //Use values. if obtained from Formik.\n        //\n        id: this.state.id,\n        description: values.description,\n        inResponseTo: values.inResponseTo,\n        targetDate: this.state.targetDate,\n        username: this.state.username\n      }).then( //When successfully update redirect user to list all Comments\n      () => {\n        this.props.navigate(\"/comments\");\n      });\n    } else {\n      console.log(\"in update\");\n      CommentDataService.updateComment(username, this.state.id, {\n        //Use state values for those which are carried over from ListComments\n        //Use values. if obtained from Formik.\n        //\n        id: this.state.id,\n        description: values.description,\n        inResponseTo: values.inResponseTo,\n        targetDate: this.state.targetDate,\n        username: this.state.username\n      }).then( //When successfully update redirect user to list all Comments\n      () => {\n        this.props.navigate(\"/comments\");\n      });\n    }\n\n    console.log(\"in onValidate\");\n  }\n\n  componentDidMount() {\n    //If it's adding a Comment then no need retrieve\n    if (this.state.id === -1) {\n      return;\n    }\n\n    let retrievedUsername = AuthenticationService.getLoggedInUserName();\n    CommentDataService.retrieveComment(username, this.state.id).then(response => this.setState({\n      description: response.data.description,\n      inResponseTo: response.data.inResponseTo,\n      username: retrievedUsername\n    }));\n  } //Validation on form fields\n\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = \"Enter a description\";\n    } else if (values.description.length < 5) {\n      errors.description = \"Enter at least 5 characters in description\";\n    } //IMPORTANT!!!!!!!!!!!!!!!!!\n    //DO CHECK FOR NUMBERS FOR INRESPONSETO FIELD\n    //\n    // if (values.inResponseTo.length < 10) {\n    //     errors.inResponseTo = \"Enter a valid name of person that you're responding to\"\n    // }\n\n\n    return errors;\n  }\n\n  render() {\n    //unpacking feature in javascript, let keys equal to dict name and it will unpack to assign \n    //keys to values individually automatically\n    let {\n      description,\n      inResponseTo\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            description,\n            inResponseTo\n          },\n          onSubmit: this.onSubmit,\n          validateOnBlur: false,\n          validateOnChange: false,\n          validate: this.validate,\n          enableReinitialize: true,\n          children: props => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"description\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"inResponseTo\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control\",\n                type: \"text\",\n                name: \"description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"In response to\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control\",\n                type: \"number\",\n                name: \"inResponseTo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              type: \"submit\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CommentComponent;","map":{"version":3,"names":["React","Component","Formik","Field","Form","ErrorMessage","moment","AuthenticationService","CommentDataService","CommentComponent","constructor","props","state","id","params","description","inResponseTo","targetDate","Date","format","username","onSubmit","bind","validate","values","getLoggedInUserName","console","log","createComment","then","navigate","updateComment","componentDidMount","retrievedUsername","retrieveComment","response","setState","data","errors","length","render"],"sources":["C:/Users/WJ/Desktop/Georgia Tech/Fall 2022/CS 8803 MAS (Special Topics) - Mobile Applications and Services/Assignment/mooc-app/mooc-app/src/components/mooc/CommentComponent.jsx"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik'\r\nimport moment from 'moment/moment'\r\n\r\nimport AuthenticationService from './AuthenticationService'\r\nimport CommentDataService from '../../api/comment/CommentDataService.js'\r\n\r\nclass CommentComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.params.id,\r\n            description: \"\",\r\n            inResponseTo: \"\",\r\n            targetDate: moment(new Date()).format('YYYY-MM-DD'),\r\n            username: \"\"\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n    }\r\n\r\n    //When Updating(PUT) or Creating(POST) comments\r\n    onSubmit(values) {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        console.log(\"state.id\" + this.state.id);\r\n        if(this.state.id === -1) {\r\n            console.log(\"in create\")\r\n            CommentDataService.createComment(username, {\r\n                //Use state values for those which are carried over from ListComments\r\n                //Use values. if obtained from Formik.\r\n                //\r\n                id: this.state.id,\r\n                description: values.description,\r\n                inResponseTo: values.inResponseTo,\r\n                targetDate: this.state.targetDate,\r\n                username: this.state.username\r\n            }).then(\r\n                //When successfully update redirect user to list all Comments\r\n                () => {\r\n                    this.props.navigate(\"/comments\")\r\n                }\r\n\r\n            )\r\n        }else {\r\n            console.log(\"in update\")\r\n            CommentDataService.updateComment(username, this.state.id, {\r\n                //Use state values for those which are carried over from ListComments\r\n                //Use values. if obtained from Formik.\r\n                //\r\n                id: this.state.id,\r\n                description: values.description,\r\n                inResponseTo: values.inResponseTo,\r\n                targetDate: this.state.targetDate,\r\n                username: this.state.username\r\n            }).then(\r\n                //When successfully update redirect user to list all Comments\r\n                () => {\r\n                    this.props.navigate(\"/comments\")\r\n                }\r\n\r\n            )\r\n        }\r\n        console.log(\"in onValidate\")\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //If it's adding a Comment then no need retrieve\r\n        if (this.state.id === -1) {\r\n            return\r\n        }\r\n\r\n        let retrievedUsername = AuthenticationService.getLoggedInUserName()\r\n        CommentDataService.retrieveComment(username, this.state.id)\r\n            .then(\r\n                response => this.setState({\r\n                    description: response.data.description,\r\n                    inResponseTo: response.data.inResponseTo,\r\n                    username: retrievedUsername\r\n                }\r\n                ))\r\n\r\n\r\n    }\r\n\r\n    //Validation on form fields\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.description) {\r\n            errors.description = \"Enter a description\"\r\n        } else if (values.description.length < 5) {\r\n            errors.description = \"Enter at least 5 characters in description\"\r\n        }\r\n\r\n        //IMPORTANT!!!!!!!!!!!!!!!!!\r\n        //DO CHECK FOR NUMBERS FOR INRESPONSETO FIELD\r\n\r\n\r\n        //\r\n        // if (values.inResponseTo.length < 10) {\r\n        //     errors.inResponseTo = \"Enter a valid name of person that you're responding to\"\r\n\r\n        // }\r\n\r\n\r\n        return errors\r\n    }\r\n\r\n    render() {\r\n        //unpacking feature in javascript, let keys equal to dict name and it will unpack to assign \r\n        //keys to values individually automatically\r\n        let { description, inResponseTo } = this.state\r\n\r\n        return (\r\n            <div>\r\n                <h1>Comment</h1>\r\n                <div className=\"container\">\r\n                    <Formik\r\n                        initialValues={{ description, inResponseTo }}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnBlur = {false}\r\n                        validateOnChange = {false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    <ErrorMessage name=\"inResponseTo\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    \r\n\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Description</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                                    </fieldset>\r\n\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>In response to</label>\r\n                                        <Field className=\"form-control\" type=\"number\" name=\"inResponseTo\" />\r\n                                    </fieldset>\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default CommentComponent"],"mappings":"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"},"metadata":{},"sourceType":"module"}