{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\WJ\\\\Desktop\\\\Georgia Tech\\\\Fall 2022\\\\CS 8803 MAS (Special Topics) - Mobile Applications and Services\\\\Assignment\\\\mooc-app\\\\mooc-app\\\\src\\\\components\\\\mooc\\\\LessonComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport moment from 'moment/moment';\nimport AuthenticationService from './AuthenticationService';\nimport CommentDataService from '../../api/comment/CommentDataService.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass LessonComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this);\n    this.state = {\n      welcomeMessage: '',\n      addComment: Boolean(false),\n      addCommentReply: Boolean(false),\n      inResponseTo: '',\n      description: \"\",\n      targetDate: moment(new Date()).format('YYYY-MM-DD'),\n      username: \"\",\n      successMessage: \"\",\n      comments: []\n    };\n    this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.enableCommentForm = this.enableCommentForm.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  }\n\n  render() {\n    let {\n      description\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Lesson\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: require('../../document.PNG'),\n          height: 700,\n          width: 600,\n          align: \"center\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.enableCommentForm(null),\n          className: \"btn \",\n          children: \"Comment on this video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), this.state.successMessage !== \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-success\",\n        children: this.state.successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 55\n      }, this), this.state.addComment === true && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            description\n          },\n          onSubmit: this.onSubmit,\n          validateOnBlur: false,\n          validateOnChange: false // validate={this.validate}\n          ,\n          enableReinitialize: true,\n          children: props => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"description\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Comment Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control\",\n                type: \"text\",\n                name: \"description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              type: \"submit\",\n              children: \"Add comment to lesson\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 53\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          align: \"center\",\n          children: [comment.inResponseTo === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [console.log(\"inResponseTo: \" + comment.inResponseTo), /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"card-title\",\n              children: [\" \", comment.username, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: comment.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary btn-sm\",\n              onClick: () => this.enableCommentForm(comment.id),\n              children: \"Reply to above comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 65\n          }, this), this.state.addCommentReply === true && this.state.inResponseTo == comment.id && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container\",\n            children: /*#__PURE__*/_jsxDEV(Formik, {\n              initialValues: {\n                description\n              },\n              onSubmit: this.onSubmit,\n              validateOnBlur: false,\n              validateOnChange: false // validate={this.validate}\n              ,\n              enableReinitialize: true,\n              children: props => /*#__PURE__*/_jsxDEV(Form, {\n                children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n                  name: \"description\",\n                  component: \"div\",\n                  className: \"alert alert-warning\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 57\n                }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n                  className: \"form-group\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Comment Description\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 61\n                  }, this), /*#__PURE__*/_jsxDEV(Field, {\n                    className: \"form-control\",\n                    type: \"text\",\n                    name: \"description\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 147,\n                    columnNumber: 61\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 57\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-success\",\n                  type: \"submit\",\n                  children: \"Reply\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 57\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 53\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 121\n          }, this)]\n        }, comment.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n  enableCommentForm(commentID) {\n    if (commentID === null) {\n      //Creating comment for video\n      this.setState({\n        addComment: !this.state.addComment\n      });\n    } else {\n      //Creating reply to comment\n      console.log(\"in enableCommentForm \" + commentID);\n      this.setState({\n        addCommentReply: !this.state.addCommentReply,\n        inResponseTo: parseInt(commentID)\n      });\n    }\n\n    console.log(\"addCommentReply \" + this.state.addCommentReply); // console.log(\"inResponseTo\" + this.state.inResponseTo)\n  }\n\n  componentDidMount() {\n    //Hide comment form when refreshing/first landing on this page\n    this.setState({\n      addComment: false,\n      addCommentReply: false\n    }); // //If it's adding a Comment then no need retrieve\n    // if (this.state.id === -1) {\n    //     return\n    // }\n    // let username = AuthenticationService.getLoggedInUserName()\n    // CommentDataService.retrieveComment(username, this.state.id)\n    //     .then(\n    //         response => this.setState({\n    //             description: response.data.description,\n    //             inResponseTo: response.data.inResponseTo\n    //         }\n    //         ))\n\n    console.log(\"componentDidMount\");\n    this.refreshComments();\n    console.log(this.state);\n  }\n\n  refreshComments() {\n    let username = AuthenticationService.getLoggedInUserName();\n    CommentDataService.retrieveAllComments(username).then(response => {\n      // console.log(response)\n      this.setState({\n        comments: response.data\n      });\n    });\n  } //When Updating(PUT) or Creating(POST) comments\n\n\n  onSubmit(values) {\n    let username = AuthenticationService.getLoggedInUserName(); // console.log(\"state.id\" + this.state.id);\n\n    if (this.state.addComment === true && this.state.addCommentReply === false) {\n      console.log(\"username: \" + username);\n      console.log(\"replying to lesson\");\n      CommentDataService.createComment(username, {\n        //Use state values for those which are carried over from ListComments\n        //Use values. if obtained from Formik.\n        //\n        id: -1,\n        description: values.description,\n        inResponseTo: 0,\n        //Set inResponseTo to 0 for all top-level replies to a lesson; vary when replying to a comment\n        targetDate: this.state.targetDate,\n        username: this.state.username\n      }).then( //When successfully update redirect user to list all Comments\n      () => {\n        // this.props.navigate(\"/comments\")\n        console.log(\"add lesson comment success\");\n        this.setState({\n          successMessage: \"Add lesson comment success\"\n        });\n        this.componentDidMount();\n      }).catch(error => this.setState({\n        successMessage: error.response.data.message\n      }));\n    }\n\n    if (this.state.addComment === false && this.state.addCommentReply === true) {\n      console.log(\"replying to comment\");\n      console.log(\"username: \" + username);\n      CommentDataService.createComment(username, {\n        //Use state values for those which are carried over from ListComments\n        //Use values. if obtained from Formik.\n        //\n        id: -1,\n        description: values.description,\n        inResponseTo: this.state.inResponseTo,\n        //Set inResponseTo to 0 for all top-level replies to a lesson; vary when replying to a comment\n        targetDate: this.state.targetDate,\n        username: this.state.username\n      }).then( //When successfully replied to comment\n      () => {\n        // this.props.navigate(\"/comments\")\n        console.log(\"replying to comment success\");\n        this.setState({\n          successMessage: \"replying to comment success\"\n        });\n        this.componentDidMount();\n      }).catch(error => this.setState({\n        successMessage: error.response.data.message\n      }));\n    }\n\n    console.log(\"in onSubmit\");\n  } //Validation on form fields\n\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = \"Enter a description\";\n    } else if (values.description.length < 5) {\n      errors.description = \"Enter at least 5 characters in description\";\n    } //IMPORTANT!!!!!!!!!!!!!!!!!\n    //DO CHECK FOR NUMBERS FOR INRESPONSETO FIELD\n    //\n    // if (values.inResponseTo.length < 10) {\n    //     errors.inResponseTo = \"Enter a valid name of person that you're responding to\"\n    // }\n\n\n    return errors;\n  }\n\n  retrieveWelcomeMessage() {\n    // HelloWorldService.executeHelloWorldService()\n    // .then(response => this.handleSuccessfulResponse(response))\n    // HelloWorldService.executeHelloWorldBeanService()\n    // .then(response => this.handleSuccessfulResponse(response))\n    HelloWorldService.executeHelloWorldPathVariableService(this.props.params.name).then(response => this.handleSuccessfulResponse(response)).catch(error => this.handleError(error));\n  }\n\n  handleSuccessfulResponse(response) {\n    console.log(response);\n    this.setState({\n      welcomeMessage: response.data.message\n    });\n  }\n\n  handleError(error) {\n    console.log(error.response);\n    this.setState({\n      welcomeMessage: error.response.data.message\n    });\n  }\n\n}\n\nexport default LessonComponent;","map":{"version":3,"names":["React","Component","Link","Formik","Field","Form","ErrorMessage","moment","AuthenticationService","CommentDataService","LessonComponent","constructor","props","retrieveWelcomeMessage","bind","state","welcomeMessage","addComment","Boolean","addCommentReply","inResponseTo","description","targetDate","Date","format","username","successMessage","comments","handleSuccessfulResponse","handleError","enableCommentForm","onSubmit","validate","render","require","map","comment","console","log","id","commentID","setState","parseInt","componentDidMount","refreshComments","getLoggedInUserName","retrieveAllComments","then","response","data","values","createComment","catch","error","message","errors","length","HelloWorldService","executeHelloWorldPathVariableService","params","name"],"sources":["C:/Users/WJ/Desktop/Georgia Tech/Fall 2022/CS 8803 MAS (Special Topics) - Mobile Applications and Services/Assignment/mooc-app/mooc-app/src/components/mooc/LessonComponent.jsx"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik'\r\nimport moment from 'moment/moment'\r\nimport AuthenticationService from './AuthenticationService'\r\nimport CommentDataService from '../../api/comment/CommentDataService.js'\r\n\r\n\r\nclass LessonComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this)\r\n        this.state = {\r\n            welcomeMessage: '',\r\n            addComment: Boolean(false),\r\n            addCommentReply: Boolean(false),\r\n            inResponseTo: '',\r\n            description: \"\",\r\n            targetDate: moment(new Date()).format('YYYY-MM-DD'),\r\n            username: \"\",\r\n            successMessage: \"\",\r\n            comments: []\r\n        }\r\n        this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this)\r\n        this.handleError = this.handleError.bind(this)\r\n        this.enableCommentForm = this.enableCommentForm.bind(this)\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n    }\r\n\r\n    render() {\r\n\r\n        let { description } = this.state\r\n\r\n        return (\r\n            <>\r\n                <h1>Lesson</h1>\r\n                <div className=\"container\">\r\n                    <img src={require('../../document.PNG')} height={700} width={600} align=\"center\" />\r\n\r\n                </div>\r\n                <div className=\"container\">\r\n\r\n                    <button onClick={() =>\r\n                        this.enableCommentForm(null)} className=\"btn \">Comment on this video</button>\r\n                </div>\r\n\r\n                <div className=\"container\" >\r\n                    <br></br>\r\n                </div>\r\n\r\n\r\n                {this.state.successMessage !== \"\" && (<div className=\"alert alert-success\">\r\n                    {this.state.successMessage}\r\n                </div>)}\r\n\r\n\r\n\r\n\r\n                {this.state.addComment === true && (<div className=\"container\">\r\n\r\n\r\n                    <Formik\r\n                        initialValues={{ description }}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnBlur={false}\r\n                        validateOnChange={false}\r\n                        // validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    {/* <ErrorMessage name=\"inResponseTo\" component=\"div\"\r\n                                        className=\"alert alert-warning\" /> */}\r\n\r\n\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Comment Description</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                                    </fieldset>\r\n\r\n                                    {/* <fieldset className=\"form-group\">\r\n                                        <label>In response to</label>\r\n                                        <Field className=\"form-control\" type=\"number\" name=\"inResponseTo\" />\r\n                                    </fieldset> */}\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Add comment to lesson</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n\r\n                    </Formik>\r\n                </div>\r\n                )}\r\n\r\n                <div>\r\n                    {/* Unpack each comment on this video to a card  */}\r\n\r\n                    {\r\n                        this.state.comments.map(\r\n                            comment => \r\n                            <div className=\"card-body\" align=\"center\" key={comment.id}>\r\n                                \r\n                                {comment.inResponseTo === 0 && (<div>\r\n                                    { console.log( \"inResponseTo: \"+ comment.inResponseTo)}\r\n                                    <h5 className=\"card-title\"> {comment.username} </h5>\r\n                                    <p className=\"card-text\">{comment.description}</p>\r\n                                    <button className=\"btn btn-primary btn-sm\" onClick={() =>\r\n                                        this.enableCommentForm(comment.id)}>Reply to above comment</button>\r\n                                    <div>\r\n                                        <br></br>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n\r\n\r\n\r\n\r\n                                \r\n                                )}\r\n\r\n\r\n                                    {(this.state.addCommentReply === true && this.state.inResponseTo == comment.id) && (<div className=\"container\">\r\n\r\n                                        <Formik\r\n                                            initialValues={{ description }}\r\n                                            onSubmit={this.onSubmit}\r\n                                            validateOnBlur={false}\r\n                                            validateOnChange={false}\r\n                                            // validate={this.validate}\r\n                                            enableReinitialize={true}\r\n                                        >\r\n                                            {\r\n                                                (props) => (\r\n                                                    <Form>\r\n                                                        <ErrorMessage name=\"description\" component=\"div\"\r\n                                                            className=\"alert alert-warning\" />\r\n                                                        {/* <ErrorMessage name=\"inResponseTo\" component=\"div\"\r\n                    className=\"alert alert-warning\" /> */}\r\n\r\n\r\n                                                        <fieldset className=\"form-group\">\r\n                                                            <label>Comment Description</label>\r\n                                                            <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                                                        </fieldset>\r\n\r\n                                                        {/* <fieldset className=\"form-group\">\r\n                    <label>In response to</label>\r\n                    <Field className=\"form-control\" type=\"number\" name=\"inResponseTo\" />\r\n                </fieldset> */}\r\n                                                        <button className=\"btn btn-success\" type=\"submit\">Reply</button>\r\n                                                    </Form>\r\n                                                )\r\n                                            }\r\n\r\n                                        </Formik>\r\n                                    </div>\r\n                                    )}\r\n                                </div>\r\n                                )\r\n                            \r\n                        \r\n                    }\r\n                </div>\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n    enableCommentForm(commentID) {\r\n\r\n        if (commentID === null) {\r\n            //Creating comment for video\r\n            this.setState({\r\n                addComment: !this.state.addComment\r\n            })\r\n        } else {\r\n            //Creating reply to comment\r\n            console.log(\"in enableCommentForm \" + commentID)\r\n            this.setState({\r\n                addCommentReply: !this.state.addCommentReply,\r\n                inResponseTo: parseInt(commentID)\r\n            })\r\n\r\n\r\n        }\r\n        console.log(\"addCommentReply \" + this.state.addCommentReply)\r\n        // console.log(\"inResponseTo\" + this.state.inResponseTo)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //Hide comment form when refreshing/first landing on this page\r\n        this.setState({\r\n            addComment: false,\r\n            addCommentReply: false\r\n        })\r\n\r\n        // //If it's adding a Comment then no need retrieve\r\n        // if (this.state.id === -1) {\r\n        //     return\r\n        // }\r\n\r\n        // let username = AuthenticationService.getLoggedInUserName()\r\n        // CommentDataService.retrieveComment(username, this.state.id)\r\n        //     .then(\r\n        //         response => this.setState({\r\n        //             description: response.data.description,\r\n        //             inResponseTo: response.data.inResponseTo\r\n        //         }\r\n        //         ))\r\n\r\n        console.log(\"componentDidMount\")\r\n        this.refreshComments();\r\n        console.log(this.state)\r\n    }\r\n\r\n    refreshComments() {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        CommentDataService.retrieveAllComments(username)\r\n            .then(\r\n                response => {\r\n                    // console.log(response)\r\n                    this.setState({ comments: response.data })\r\n                }\r\n\r\n            )\r\n    }\r\n\r\n\r\n\r\n    //When Updating(PUT) or Creating(POST) comments\r\n    onSubmit(values) {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        // console.log(\"state.id\" + this.state.id);\r\n        if (this.state.addComment === true && this.state.addCommentReply === false) {\r\n            console.log(\"username: \" + username)\r\n            console.log(\"replying to lesson\")\r\n            CommentDataService.createComment(username, {\r\n                //Use state values for those which are carried over from ListComments\r\n                //Use values. if obtained from Formik.\r\n                //\r\n                id: -1,\r\n                description: values.description,\r\n                inResponseTo: 0, //Set inResponseTo to 0 for all top-level replies to a lesson; vary when replying to a comment\r\n                targetDate: this.state.targetDate,\r\n                username: this.state.username\r\n            }).then(\r\n                //When successfully update redirect user to list all Comments\r\n                () => {\r\n                    // this.props.navigate(\"/comments\")\r\n                    console.log(\"add lesson comment success\")\r\n                    this.setState({\r\n                        successMessage: \"Add lesson comment success\"\r\n                    })\r\n                    this.componentDidMount()\r\n                }\r\n\r\n            ).catch(\r\n                error => this.setState({\r\n                    successMessage: error.response.data.message\r\n                })\r\n            )\r\n        }\r\n\r\n        if (this.state.addComment === false && this.state.addCommentReply === true) {\r\n            console.log(\"replying to comment\")\r\n            console.log(\"username: \" + username)\r\n            CommentDataService.createComment(username, {\r\n                //Use state values for those which are carried over from ListComments\r\n                //Use values. if obtained from Formik.\r\n                //\r\n                id: -1,\r\n                description: values.description,\r\n                inResponseTo: this.state.inResponseTo, //Set inResponseTo to 0 for all top-level replies to a lesson; vary when replying to a comment\r\n                targetDate: this.state.targetDate,\r\n                username: this.state.username\r\n            }).then(\r\n                //When successfully replied to comment\r\n                () => {\r\n                    // this.props.navigate(\"/comments\")\r\n                    console.log(\"replying to comment success\")\r\n                    this.setState({\r\n                        successMessage: \"replying to comment success\"\r\n                    })\r\n                    this.componentDidMount()\r\n                }\r\n\r\n            ).catch(\r\n                error => this.setState({\r\n                    successMessage: error.response.data.message\r\n                })\r\n            )\r\n        }\r\n        console.log(\"in onSubmit\")\r\n    }\r\n\r\n\r\n\r\n\r\n    //Validation on form fields\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.description) {\r\n            errors.description = \"Enter a description\"\r\n        } else if (values.description.length < 5) {\r\n            errors.description = \"Enter at least 5 characters in description\"\r\n        }\r\n\r\n        //IMPORTANT!!!!!!!!!!!!!!!!!\r\n        //DO CHECK FOR NUMBERS FOR INRESPONSETO FIELD\r\n\r\n\r\n        //\r\n        // if (values.inResponseTo.length < 10) {\r\n        //     errors.inResponseTo = \"Enter a valid name of person that you're responding to\"\r\n\r\n        // }\r\n\r\n\r\n        return errors\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    retrieveWelcomeMessage() {\r\n        // HelloWorldService.executeHelloWorldService()\r\n        // .then(response => this.handleSuccessfulResponse(response))\r\n        // HelloWorldService.executeHelloWorldBeanService()\r\n        // .then(response => this.handleSuccessfulResponse(response))\r\n        HelloWorldService.executeHelloWorldPathVariableService(this.props.params.name)\r\n            .then(response => this.handleSuccessfulResponse(response))\r\n            .catch(error => this.handleError(error))\r\n    }\r\n\r\n    handleSuccessfulResponse(response) {\r\n        console.log(response)\r\n        this.setState({ welcomeMessage: response.data.message })\r\n    }\r\n\r\n    handleError(error) {\r\n        console.log(error.response)\r\n        this.setState({ welcomeMessage: error.response.data.message })\r\n    }\r\n\r\n}\r\nexport default LessonComponent"],"mappings":"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"},"metadata":{},"sourceType":"module"}