{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\WJ\\\\Desktop\\\\Georgia Tech\\\\Fall 2022\\\\CS 8803 MAS (Special Topics) - Mobile Applications and Services\\\\Assignment\\\\mooc-app\\\\mooc-app\\\\src\\\\components\\\\mooc\\\\LessonComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport moment from 'moment/moment';\nimport AuthenticationService from './AuthenticationService';\nimport CommentDataService from '../../api/comment/CommentDataService.js';\nimport parse from 'html-react-parser';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass LessonComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this);\n    this.state = {\n      welcomeMessage: '',\n      addComment: Boolean(false),\n      addCommentReply: Boolean(false),\n      inResponseTo: '',\n      description: \"\",\n      targetDate: moment(new Date()).format('YYYY-MM-DD'),\n      username: \"\",\n      successMessage: \"\",\n      comments: [],\n      hasReplies: Boolean(false)\n    };\n    this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.enableCommentForm = this.enableCommentForm.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n    this.displayNestedReplies = this.displayNestedReplies.bind(this);\n  }\n\n  render() {\n    let {\n      description\n    } = this.state;\n    let currentTopLevelCommentID = 0;\n    let hasReplies = false;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Lesson\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: require('../../document.PNG'),\n          height: 700,\n          width: 600,\n          align: \"center\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.enableCommentForm(null),\n          className: \"btn \",\n          children: \"Comment on this video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), this.state.successMessage !== \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-success\",\n        children: this.state.successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 55\n      }, this), this.state.addComment === true && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            description\n          },\n          onSubmit: this.onSubmit,\n          validateOnBlur: false,\n          validateOnChange: false // validate={this.validate}\n          ,\n          enableReinitialize: true,\n          children: props => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"description\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Comment Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control\",\n                type: \"text\",\n                name: \"description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              type: \"submit\",\n              children: \"Add comment to lesson\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 53\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.comments.map(comment => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [comment.inResponseTo === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            align: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 54\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 63\n            }, this), currentTopLevelCommentID = comment.id, /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"card-title\",\n              children: [\" \", comment.username, \" - (comment id: \", comment.id, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: comment.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary btn-sm\",\n              onClick: () => this.enableCommentForm(comment.id),\n              children: \"Reply to above comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 45\n            }, this), this.state.addCommentReply === true && this.state.inResponseTo == comment.id && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container\",\n              children: /*#__PURE__*/_jsxDEV(Formik, {\n                initialValues: {\n                  description\n                },\n                onSubmit: this.onSubmit,\n                validateOnBlur: false,\n                validateOnChange: false // validate={this.validate}\n                ,\n                enableReinitialize: true,\n                children: props => /*#__PURE__*/_jsxDEV(Form, {\n                  children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n                    name: \"description\",\n                    component: \"div\",\n                    className: \"alert alert-warning\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 137,\n                    columnNumber: 69\n                  }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Comment Description\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 144,\n                      columnNumber: 73\n                    }, this), /*#__PURE__*/_jsxDEV(Field, {\n                      className: \"form-control\",\n                      type: \"text\",\n                      name: \"description\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 145,\n                      columnNumber: 73\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 143,\n                    columnNumber: 69\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-success\",\n                    type: \"submit\",\n                    children: \"Reply\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 152,\n                    columnNumber: 69\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 65\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 53\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 50\n            }, this)]\n          }, comment.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 42\n          }, this), (() => {\n            this.displayNestedReplies(comment.id, currentTopLevelCommentID); //                                 if (comment.id == currentTopLevelCommentID) {\n            //                                     var secondLevelComments = this.displayNestedReplies(currentTopLevelCommentID)\n            //                                     // var combinedReplies = this.displayNestedReplies(comment.id)\n            //                                     if (secondLevelComments.length > 0) {\n            //                                         hasReplies = true\n            //                                     } else {\n            //                                         hasReplies = false\n            //                                     }\n            //                                     return (secondLevelComments.map(comment =>\n            //                                         <>\n            //                                             <h5 className=\"card-title\"> {comment.username} - (comment id: {comment.id}) replied to top-level comment id: {currentTopLevelCommentID} </h5>\n            //                                             <p className=\"card-text\">{comment.description}</p>\n            //                                             <button className=\"btn btn-primary btn-sm\" onClick={() =>\n            //                                                 this.enableCommentForm(comment.id)}>Reply to above comment</button>\n            //                                             {(this.state.addCommentReply === true && this.state.inResponseTo == comment.id) &&\n            //                                                 (<div className=\"container\">\n            //                                                     <Formik\n            //                                                         initialValues={{ description }}\n            //                                                         onSubmit={this.onSubmit}\n            //                                                         validateOnBlur={false}\n            //                                                         validateOnChange={false}\n            //                                                         // validate={this.validate}\n            //                                                         enableReinitialize={true}\n            //                                                     >\n            //                                                         {\n            //                                                             (props) => (\n            //                                                                 <Form>\n            //                                                                     <ErrorMessage name=\"description\" component=\"div\"\n            //                                                                         className=\"alert alert-warning\" />\n            //                                                                     {/* <ErrorMessage name=\"inResponseTo\" component=\"div\"\n            // className=\"alert alert-warning\" /> */}\n            //                                                                     <fieldset className=\"form-group\">\n            //                                                                         <label>Comment Description</label>\n            //                                                                         <Field className=\"form-control\" type=\"text\" name=\"description\" />\n            //                                                                     </fieldset>\n            //                                                                     {/* <fieldset className=\"form-group\">\n            // <label>In response to</label>\n            // <Field className=\"form-control\" type=\"number\" name=\"inResponseTo\" />\n            // </fieldset> */}\n            //                                                                     <button className=\"btn btn-success\" type=\"submit\">Reply</button>\n            //                                                                 </Form>\n            //                                                             )\n            //                                                         }\n            //                                                     </Formik>\n            //                                                 </div>\n            //                                                 )\n            //                                             }\n            //                                         </>\n            //                                     ))\n            //                                 }\n          })()]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n  displayNestedReplies(currentLevelCommentID, commentIDToBeRepliedTo) {\n    var comments = this.state.comments; //terminating recursive condition: when no more comments are replies to any upper level comments\n\n    var secondLevelComments = []; // var combinedReplies = \"\"\n\n    for (var i = 0; i < comments.length; i++) {\n      var singleComment = comments[i]; // console.log(\"in displayNestedReplies \" + obj.description)\n      // console.log(\"potential second level comment .inResponseTo: \" + singleComment.inResponseTo + \" singleComment id: \" + singleComment.id + \" commentIDToBeRepliedTo: \" + commentIDToBeRepliedTo)\n      // console.log(\"still in first loop\")\n\n      if (singleComment.inResponseTo == commentIDToBeRepliedTo) {\n        // console.log(\" singleComment id: \" + singleComment.id + \" second level comment .inResponseTo: \" + singleComment.inResponseTo)\n        // console.log(\"in second loop\")\n        // var singleCommentDescription = \"<div>\" + singleComment.description + \"</div><br/>\"\n        // combinedReplies += singleCommentDescription\n        secondLevelComments.push(singleComment);\n      }\n    }\n\n    if (currentLevelCommentID == currentTopLevelCommentID) {\n      var secondLevelComments = this.displayNestedReplies(currentTopLevelCommentID); // var combinedReplies = this.displayNestedReplies(comment.id)\n\n      if (secondLevelComments.length > 0) {\n        hasReplies = true;\n      } else {\n        hasReplies = false;\n      }\n\n      return secondLevelComments.map(comment => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"card-title\",\n          children: [\" \", comment.username, \" - (comment id: \", comment.id, \") replied to top-level comment id: \", currentTopLevelCommentID, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: comment.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary btn-sm\",\n          onClick: () => this.enableCommentForm(comment.id),\n          children: \"Reply to above comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 21\n        }, this), this.state.addCommentReply === true && this.state.inResponseTo == comment.id && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(Formik, {\n            initialValues: {\n              description\n            },\n            onSubmit: this.onSubmit,\n            validateOnBlur: false,\n            validateOnChange: false // validate={this.validate}\n            ,\n            enableReinitialize: true,\n            children: props => /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"description\",\n                component: \"div\",\n                className: \"alert alert-warning\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Comment Description\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 329,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  className: \"form-control\",\n                  type: \"text\",\n                  name: \"description\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 330,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success\",\n                type: \"submit\",\n                children: \"Reply\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 337,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true));\n    } //recurse over 2nd secondLevelComments to get nested replies\n\n\n    if (secondLevelComments.length != 0) {\n      for (var i = 0; i < secondLevelComments.length; i++) {\n        this.displayNestedReplies(secondLevelComments[i].id);\n      }\n    }\n\n    return secondLevelComments;\n  }\n\n  enableCommentForm(commentID) {\n    if (commentID === null) {\n      //Creating comment for video\n      this.setState({\n        addComment: !this.state.addComment\n      });\n    } else {\n      //Creating reply to comment\n      console.log(\"in enableCommentForm \" + commentID);\n      this.setState({\n        addCommentReply: !this.state.addCommentReply,\n        inResponseTo: parseInt(commentID)\n      });\n    }\n\n    console.log(\"addCommentReply \" + this.state.addCommentReply); // console.log(\"inResponseTo\" + this.state.inResponseTo)\n  }\n\n  componentDidMount() {\n    //Hide comment form when refreshing/first landing on this page\n    this.setState({\n      addComment: false,\n      addCommentReply: false\n    }); // //If it's adding a Comment then no need retrieve\n    // if (this.state.id === -1) {\n    //     return\n    // }\n    // let username = AuthenticationService.getLoggedInUserName()\n    // CommentDataService.retrieveComment(username, this.state.id)\n    //     .then(\n    //         response => this.setState({\n    //             description: response.data.description,\n    //             inResponseTo: response.data.inResponseTo\n    //         }\n    //         ))\n\n    console.log(\"componentDidMount\");\n    this.refreshComments();\n    console.log(this.state);\n  }\n\n  refreshComments() {\n    let username = AuthenticationService.getLoggedInUserName();\n    CommentDataService.retrieveAllComments(username).then(response => {\n      // console.log(response)\n      this.setState({\n        comments: response.data\n      });\n    });\n  } //When Updating(PUT) or Creating(POST) comments\n\n\n  onSubmit(values) {\n    let username = AuthenticationService.getLoggedInUserName(); // console.log(\"state.id\" + this.state.id);\n\n    if (this.state.addComment === true && this.state.addCommentReply === false) {\n      console.log(\"username: \" + username);\n      console.log(\"replying to lesson\");\n      CommentDataService.createComment(username, {\n        //Use state values for those which are carried over from ListComments\n        //Use values. if obtained from Formik.\n        //\n        id: -1,\n        description: values.description,\n        inResponseTo: 0,\n        //Set inResponseTo to 0 for all top-level replies to a lesson; vary when replying to a comment\n        targetDate: this.state.targetDate,\n        username: this.state.username\n      }).then( //When successfully update redirect user to list all Comments\n      () => {\n        // this.props.navigate(\"/comments\")\n        console.log(\"add lesson comment success\");\n        this.setState({\n          successMessage: \"Add lesson comment success\"\n        });\n        this.componentDidMount();\n      }).catch(error => this.setState({\n        successMessage: error.response.data.message\n      }));\n    }\n\n    if (this.state.addComment === false && this.state.addCommentReply === true) {\n      console.log(\"replying to comment\");\n      console.log(\"username: \" + username);\n      CommentDataService.createComment(username, {\n        //Use state values for those which are carried over from ListComments\n        //Use values. if obtained from Formik.\n        //\n        id: -1,\n        description: values.description,\n        inResponseTo: this.state.inResponseTo,\n        //Set inResponseTo to 0 for all top-level replies to a lesson; vary when replying to a comment\n        targetDate: this.state.targetDate,\n        username: this.state.username\n      }).then( //When successfully replied to comment\n      () => {\n        // this.props.navigate(\"/comments\")\n        console.log(\"replying to comment success\");\n        this.setState({\n          successMessage: \"replying to comment success\"\n        });\n        this.componentDidMount();\n      }).catch(error => this.setState({\n        successMessage: error.response.data.message\n      }));\n    }\n\n    console.log(\"in onSubmit\");\n  } //Validation on form fields\n\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = \"Enter a description\";\n    } else if (values.description.length < 5) {\n      errors.description = \"Enter at least 5 characters in description\";\n    } //IMPORTANT!!!!!!!!!!!!!!!!!\n    //DO CHECK FOR NUMBERS FOR INRESPONSETO FIELD\n    //\n    // if (values.inResponseTo.length < 10) {\n    //     errors.inResponseTo = \"Enter a valid name of person that you're responding to\"\n    // }\n\n\n    return errors;\n  }\n\n  retrieveWelcomeMessage() {\n    // HelloWorldService.executeHelloWorldService()\n    // .then(response => this.handleSuccessfulResponse(response))\n    // HelloWorldService.executeHelloWorldBeanService()\n    // .then(response => this.handleSuccessfulResponse(response))\n    HelloWorldService.executeHelloWorldPathVariableService(this.props.params.name).then(response => this.handleSuccessfulResponse(response)).catch(error => this.handleError(error));\n  }\n\n  handleSuccessfulResponse(response) {\n    console.log(response);\n    this.setState({\n      welcomeMessage: response.data.message\n    });\n  }\n\n  handleError(error) {\n    console.log(error.response);\n    this.setState({\n      welcomeMessage: error.response.data.message\n    });\n  }\n\n}\n\nexport default LessonComponent;","map":{"version":3,"names":["React","Component","Link","Formik","Field","Form","ErrorMessage","moment","AuthenticationService","CommentDataService","parse","LessonComponent","constructor","props","retrieveWelcomeMessage","bind","state","welcomeMessage","addComment","Boolean","addCommentReply","inResponseTo","description","targetDate","Date","format","username","successMessage","comments","hasReplies","handleSuccessfulResponse","handleError","enableCommentForm","onSubmit","validate","displayNestedReplies","render","currentTopLevelCommentID","require","map","comment","id","currentLevelCommentID","commentIDToBeRepliedTo","secondLevelComments","i","length","singleComment","push","commentID","setState","console","log","parseInt","componentDidMount","refreshComments","getLoggedInUserName","retrieveAllComments","then","response","data","values","createComment","catch","error","message","errors","HelloWorldService","executeHelloWorldPathVariableService","params","name"],"sources":["C:/Users/WJ/Desktop/Georgia Tech/Fall 2022/CS 8803 MAS (Special Topics) - Mobile Applications and Services/Assignment/mooc-app/mooc-app/src/components/mooc/LessonComponent.jsx"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik'\r\nimport moment from 'moment/moment'\r\nimport AuthenticationService from './AuthenticationService'\r\nimport CommentDataService from '../../api/comment/CommentDataService.js'\r\nimport parse from 'html-react-parser';\r\n\r\nclass LessonComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this)\r\n        this.state = {\r\n            welcomeMessage: '',\r\n            addComment: Boolean(false),\r\n            addCommentReply: Boolean(false),\r\n            inResponseTo: '',\r\n            description: \"\",\r\n            targetDate: moment(new Date()).format('YYYY-MM-DD'),\r\n            username: \"\",\r\n            successMessage: \"\",\r\n            comments: [],\r\n            hasReplies: Boolean(false)\r\n        }\r\n        this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this)\r\n        this.handleError = this.handleError.bind(this)\r\n        this.enableCommentForm = this.enableCommentForm.bind(this)\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.displayNestedReplies = this.displayNestedReplies.bind(this)\r\n    }\r\n\r\n    render() {\r\n\r\n        let { description } = this.state\r\n        let currentTopLevelCommentID = 0\r\n        let hasReplies = false\r\n        return (\r\n            <>\r\n                <h1>Lesson</h1>\r\n                <div className=\"container\">\r\n                    <img src={require('../../document.PNG')} height={700} width={600} align=\"center\" />\r\n\r\n                </div>\r\n                <div className=\"container\">\r\n\r\n                    <button onClick={() =>\r\n                        this.enableCommentForm(null)} className=\"btn \">Comment on this video</button>\r\n                </div>\r\n\r\n                <div className=\"container\" >\r\n                    <br></br>\r\n                </div>\r\n\r\n\r\n                {this.state.successMessage !== \"\" && (<div className=\"alert alert-success\">\r\n                    {this.state.successMessage}\r\n                </div>)}\r\n\r\n\r\n\r\n\r\n                {this.state.addComment === true && (<div className=\"container\">\r\n\r\n\r\n                    <Formik\r\n                        initialValues={{ description }}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnBlur={false}\r\n                        validateOnChange={false}\r\n                        // validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    {/* <ErrorMessage name=\"inResponseTo\" component=\"div\"\r\n                                        className=\"alert alert-warning\" /> */}\r\n\r\n\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Comment Description</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                                    </fieldset>\r\n\r\n                                    {/* <fieldset className=\"form-group\">\r\n                                        <label>In response to</label>\r\n                                        <Field className=\"form-control\" type=\"number\" name=\"inResponseTo\" />\r\n                                    </fieldset> */}\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Add comment to lesson</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n\r\n                    </Formik>\r\n                </div>\r\n                )}\r\n\r\n                <div>\r\n                    {/* Unpack each comment on this video to a div card  */}\r\n\r\n                    {\r\n                        this.state.comments.map(\r\n                            comment =>\r\n                                <>\r\n                                    {/* Only display comments for lesson for top level  */}\r\n                                    {comment.inResponseTo === 0 &&\r\n                                        (<div className=\"card-body\" align=\"center\" key={comment.id}>\r\n                                            {/* {console.log(\"inResponseTo: \" + comment.inResponseTo)} */}\r\n                                            <br></br><br></br><br></br>\r\n                                            {(currentTopLevelCommentID = comment.id)}\r\n                                            <h5 className=\"card-title\"> {comment.username} - (comment id: {comment.id})</h5>\r\n                                            <p className=\"card-text\">{comment.description}</p>\r\n                                            <button className=\"btn btn-primary btn-sm\" onClick={() =>\r\n                                                this.enableCommentForm(comment.id)}>Reply to above comment</button>\r\n                                            <div>\r\n                                                <br></br>\r\n                                            </div>\r\n\r\n                                            {(this.state.addCommentReply === true && this.state.inResponseTo == comment.id) &&\r\n                                                (<div className=\"container\">\r\n\r\n                                                    <Formik\r\n                                                        initialValues={{ description }}\r\n                                                        onSubmit={this.onSubmit}\r\n                                                        validateOnBlur={false}\r\n                                                        validateOnChange={false}\r\n                                                        // validate={this.validate}\r\n                                                        enableReinitialize={true}\r\n                                                    >\r\n                                                        {\r\n                                                            (props) => (\r\n                                                                <Form>\r\n                                                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                                                        className=\"alert alert-warning\" />\r\n                                                                    {/* <ErrorMessage name=\"inResponseTo\" component=\"div\"\r\n    className=\"alert alert-warning\" /> */}\r\n\r\n\r\n                                                                    <fieldset className=\"form-group\">\r\n                                                                        <label>Comment Description</label>\r\n                                                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                                                                    </fieldset>\r\n\r\n                                                                    {/* <fieldset className=\"form-group\">\r\n    <label>In response to</label>\r\n    <Field className=\"form-control\" type=\"number\" name=\"inResponseTo\" />\r\n    </fieldset> */}\r\n                                                                    <button className=\"btn btn-success\" type=\"submit\">Reply</button>\r\n                                                                </Form>\r\n                                                            )\r\n                                                        }\r\n\r\n                                                    </Formik>\r\n                                                </div>\r\n                                                )\r\n                                            }\r\n\r\n\r\n\r\n\r\n\r\n                                        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                        )\r\n\r\n                                    }\r\n\r\n\r\n                                    {/*Displaying only 2nd level comments that reply to top-level comments */}\r\n                                    {(() => {\r\n\r\n                                        this.displayNestedReplies(comment.id, currentTopLevelCommentID)\r\n        //                                 if (comment.id == currentTopLevelCommentID) {\r\n        //                                     var secondLevelComments = this.displayNestedReplies(currentTopLevelCommentID)\r\n        //                                     // var combinedReplies = this.displayNestedReplies(comment.id)\r\n        //                                     if (secondLevelComments.length > 0) {\r\n        //                                         hasReplies = true\r\n        //                                     } else {\r\n        //                                         hasReplies = false\r\n        //                                     }\r\n\r\n\r\n        //                                     return (secondLevelComments.map(comment =>\r\n        //                                         <>\r\n        //                                             <h5 className=\"card-title\"> {comment.username} - (comment id: {comment.id}) replied to top-level comment id: {currentTopLevelCommentID} </h5>\r\n        //                                             <p className=\"card-text\">{comment.description}</p>\r\n        //                                             <button className=\"btn btn-primary btn-sm\" onClick={() =>\r\n        //                                                 this.enableCommentForm(comment.id)}>Reply to above comment</button>\r\n\r\n\r\n        //                                             {(this.state.addCommentReply === true && this.state.inResponseTo == comment.id) &&\r\n        //                                                 (<div className=\"container\">\r\n\r\n        //                                                     <Formik\r\n        //                                                         initialValues={{ description }}\r\n        //                                                         onSubmit={this.onSubmit}\r\n        //                                                         validateOnBlur={false}\r\n        //                                                         validateOnChange={false}\r\n        //                                                         // validate={this.validate}\r\n        //                                                         enableReinitialize={true}\r\n        //                                                     >\r\n        //                                                         {\r\n        //                                                             (props) => (\r\n        //                                                                 <Form>\r\n        //                                                                     <ErrorMessage name=\"description\" component=\"div\"\r\n        //                                                                         className=\"alert alert-warning\" />\r\n        //                                                                     {/* <ErrorMessage name=\"inResponseTo\" component=\"div\"\r\n        // className=\"alert alert-warning\" /> */}\r\n\r\n\r\n        //                                                                     <fieldset className=\"form-group\">\r\n        //                                                                         <label>Comment Description</label>\r\n        //                                                                         <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n        //                                                                     </fieldset>\r\n\r\n        //                                                                     {/* <fieldset className=\"form-group\">\r\n        // <label>In response to</label>\r\n        // <Field className=\"form-control\" type=\"number\" name=\"inResponseTo\" />\r\n        // </fieldset> */}\r\n        //                                                                     <button className=\"btn btn-success\" type=\"submit\">Reply</button>\r\n        //                                                                 </Form>\r\n        //                                                             )\r\n        //                                                         }\r\n\r\n        //                                                     </Formik>\r\n        //                                                 </div>\r\n        //                                                 )\r\n        //                                             }\r\n        //                                         </>\r\n        //                                     ))\r\n        //                                 }\r\n\r\n\r\n\r\n                                    })()}\r\n\r\n                                    {/*line breaks between top-level comments*/}\r\n                                    {/* {(() => {\r\n\r\n                                        if (hasReplies) {\r\n                                            return <div> <br></br><br></br><br></br></div>\r\n                                        }\r\n                                    })()} */}\r\n\r\n\r\n\r\n                                </>\r\n\r\n                        )\r\n\r\n\r\n                    }\r\n                </div>\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n    displayNestedReplies(currentLevelCommentID, commentIDToBeRepliedTo) {\r\n\r\n\r\n        var comments = this.state.comments\r\n        //terminating recursive condition: when no more comments are replies to any upper level comments\r\n\r\n\r\n        var secondLevelComments = []\r\n        // var combinedReplies = \"\"\r\n        for (var i = 0; i < comments.length; i++) {\r\n            var singleComment = comments[i]\r\n            // console.log(\"in displayNestedReplies \" + obj.description)\r\n            // console.log(\"potential second level comment .inResponseTo: \" + singleComment.inResponseTo + \" singleComment id: \" + singleComment.id + \" commentIDToBeRepliedTo: \" + commentIDToBeRepliedTo)\r\n            // console.log(\"still in first loop\")\r\n            if (singleComment.inResponseTo == commentIDToBeRepliedTo) {\r\n                // console.log(\" singleComment id: \" + singleComment.id + \" second level comment .inResponseTo: \" + singleComment.inResponseTo)\r\n                // console.log(\"in second loop\")\r\n                // var singleCommentDescription = \"<div>\" + singleComment.description + \"</div><br/>\"\r\n                // combinedReplies += singleCommentDescription\r\n                secondLevelComments.push(singleComment)\r\n            }\r\n        }\r\n        if (currentLevelCommentID == currentTopLevelCommentID) {\r\n            var secondLevelComments = this.displayNestedReplies(currentTopLevelCommentID)\r\n            // var combinedReplies = this.displayNestedReplies(comment.id)\r\n            if (secondLevelComments.length > 0) {\r\n                hasReplies = true\r\n            } else {\r\n                hasReplies = false\r\n            }\r\n\r\n\r\n            return (secondLevelComments.map(comment =>\r\n                <>\r\n                    <h5 className=\"card-title\"> {comment.username} - (comment id: {comment.id}) replied to top-level comment id: {currentTopLevelCommentID} </h5>\r\n                    <p className=\"card-text\">{comment.description}</p>\r\n                    <button className=\"btn btn-primary btn-sm\" onClick={() =>\r\n                        this.enableCommentForm(comment.id)}>Reply to above comment</button>\r\n\r\n\r\n                    {(this.state.addCommentReply === true && this.state.inResponseTo == comment.id) &&\r\n                        (<div className=\"container\">\r\n\r\n                            <Formik\r\n                                initialValues={{ description }}\r\n                                onSubmit={this.onSubmit}\r\n                                validateOnBlur={false}\r\n                                validateOnChange={false}\r\n                                // validate={this.validate}\r\n                                enableReinitialize={true}\r\n                            >\r\n                                {\r\n                                    (props) => (\r\n                                        <Form>\r\n                                            <ErrorMessage name=\"description\" component=\"div\"\r\n                                                className=\"alert alert-warning\" />\r\n                                            {/* <ErrorMessage name=\"inResponseTo\" component=\"div\"\r\nclassName=\"alert alert-warning\" /> */}\r\n\r\n\r\n                                            <fieldset className=\"form-group\">\r\n                                                <label>Comment Description</label>\r\n                                                <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                                            </fieldset>\r\n\r\n                                            {/* <fieldset className=\"form-group\">\r\n<label>In response to</label>\r\n<Field className=\"form-control\" type=\"number\" name=\"inResponseTo\" />\r\n</fieldset> */}\r\n                                            <button className=\"btn btn-success\" type=\"submit\">Reply</button>\r\n                                        </Form>\r\n                                    )\r\n                                }\r\n\r\n                            </Formik>\r\n                        </div>\r\n                        )\r\n                    }\r\n                </>\r\n            ))\r\n        }\r\n\r\n\r\n\r\n        //recurse over 2nd secondLevelComments to get nested replies\r\n        if (secondLevelComments.length != 0) {\r\n            for (var i = 0; i < secondLevelComments.length; i++) {\r\n                this.displayNestedReplies(secondLevelComments[i].id)\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        return secondLevelComments\r\n\r\n    }\r\n\r\n    enableCommentForm(commentID) {\r\n\r\n        if (commentID === null) {\r\n            //Creating comment for video\r\n            this.setState({\r\n                addComment: !this.state.addComment\r\n            })\r\n        } else {\r\n            //Creating reply to comment\r\n            console.log(\"in enableCommentForm \" + commentID)\r\n            this.setState({\r\n                addCommentReply: !this.state.addCommentReply,\r\n                inResponseTo: parseInt(commentID)\r\n            })\r\n\r\n\r\n        }\r\n        console.log(\"addCommentReply \" + this.state.addCommentReply)\r\n        // console.log(\"inResponseTo\" + this.state.inResponseTo)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //Hide comment form when refreshing/first landing on this page\r\n        this.setState({\r\n            addComment: false,\r\n            addCommentReply: false\r\n        })\r\n\r\n        // //If it's adding a Comment then no need retrieve\r\n        // if (this.state.id === -1) {\r\n        //     return\r\n        // }\r\n\r\n        // let username = AuthenticationService.getLoggedInUserName()\r\n        // CommentDataService.retrieveComment(username, this.state.id)\r\n        //     .then(\r\n        //         response => this.setState({\r\n        //             description: response.data.description,\r\n        //             inResponseTo: response.data.inResponseTo\r\n        //         }\r\n        //         ))\r\n\r\n        console.log(\"componentDidMount\")\r\n        this.refreshComments();\r\n        console.log(this.state)\r\n    }\r\n\r\n    refreshComments() {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        CommentDataService.retrieveAllComments(username)\r\n            .then(\r\n                response => {\r\n                    // console.log(response)\r\n                    this.setState({ comments: response.data })\r\n                }\r\n\r\n            )\r\n    }\r\n\r\n\r\n\r\n    //When Updating(PUT) or Creating(POST) comments\r\n    onSubmit(values) {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        // console.log(\"state.id\" + this.state.id);\r\n        if (this.state.addComment === true && this.state.addCommentReply === false) {\r\n            console.log(\"username: \" + username)\r\n            console.log(\"replying to lesson\")\r\n            CommentDataService.createComment(username, {\r\n                //Use state values for those which are carried over from ListComments\r\n                //Use values. if obtained from Formik.\r\n                //\r\n                id: -1,\r\n                description: values.description,\r\n                inResponseTo: 0, //Set inResponseTo to 0 for all top-level replies to a lesson; vary when replying to a comment\r\n                targetDate: this.state.targetDate,\r\n                username: this.state.username\r\n            }).then(\r\n                //When successfully update redirect user to list all Comments\r\n                () => {\r\n                    // this.props.navigate(\"/comments\")\r\n                    console.log(\"add lesson comment success\")\r\n                    this.setState({\r\n                        successMessage: \"Add lesson comment success\"\r\n                    })\r\n                    this.componentDidMount()\r\n                }\r\n\r\n            ).catch(\r\n                error => this.setState({\r\n                    successMessage: error.response.data.message\r\n                })\r\n            )\r\n        }\r\n\r\n        if (this.state.addComment === false && this.state.addCommentReply === true) {\r\n            console.log(\"replying to comment\")\r\n            console.log(\"username: \" + username)\r\n            CommentDataService.createComment(username, {\r\n                //Use state values for those which are carried over from ListComments\r\n                //Use values. if obtained from Formik.\r\n                //\r\n                id: -1,\r\n                description: values.description,\r\n                inResponseTo: this.state.inResponseTo, //Set inResponseTo to 0 for all top-level replies to a lesson; vary when replying to a comment\r\n                targetDate: this.state.targetDate,\r\n                username: this.state.username\r\n            }).then(\r\n                //When successfully replied to comment\r\n                () => {\r\n                    // this.props.navigate(\"/comments\")\r\n                    console.log(\"replying to comment success\")\r\n                    this.setState({\r\n                        successMessage: \"replying to comment success\"\r\n                    })\r\n                    this.componentDidMount()\r\n                }\r\n\r\n            ).catch(\r\n                error => this.setState({\r\n                    successMessage: error.response.data.message\r\n                })\r\n            )\r\n        }\r\n        console.log(\"in onSubmit\")\r\n    }\r\n\r\n\r\n\r\n\r\n    //Validation on form fields\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.description) {\r\n            errors.description = \"Enter a description\"\r\n        } else if (values.description.length < 5) {\r\n            errors.description = \"Enter at least 5 characters in description\"\r\n        }\r\n\r\n        //IMPORTANT!!!!!!!!!!!!!!!!!\r\n        //DO CHECK FOR NUMBERS FOR INRESPONSETO FIELD\r\n\r\n\r\n        //\r\n        // if (values.inResponseTo.length < 10) {\r\n        //     errors.inResponseTo = \"Enter a valid name of person that you're responding to\"\r\n\r\n        // }\r\n\r\n\r\n        return errors\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    retrieveWelcomeMessage() {\r\n        // HelloWorldService.executeHelloWorldService()\r\n        // .then(response => this.handleSuccessfulResponse(response))\r\n        // HelloWorldService.executeHelloWorldBeanService()\r\n        // .then(response => this.handleSuccessfulResponse(response))\r\n        HelloWorldService.executeHelloWorldPathVariableService(this.props.params.name)\r\n            .then(response => this.handleSuccessfulResponse(response))\r\n            .catch(error => this.handleError(error))\r\n    }\r\n\r\n    handleSuccessfulResponse(response) {\r\n        console.log(response)\r\n        this.setState({ welcomeMessage: response.data.message })\r\n    }\r\n\r\n    handleError(error) {\r\n        console.log(error.response)\r\n        this.setState({ welcomeMessage: error.response.data.message })\r\n    }\r\n\r\n}\r\nexport default LessonComponent"],"mappings":"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"},"metadata":{},"sourceType":"module"}