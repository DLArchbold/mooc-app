{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\WJ\\\\Desktop\\\\Georgia Tech\\\\Fall 2022\\\\CS 8803 MAS (Special Topics) - Mobile Applications and Services\\\\Assignment\\\\mooc-app\\\\mooc-app\\\\src\\\\components\\\\mooc\\\\LessonComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport moment from 'moment/moment';\nimport AuthenticationService from './AuthenticationService';\nimport CommentDataService from '../../api/comment/CommentDataService.js';\nimport parse from 'html-react-parser';\nimport CommentComponent from './CommentComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass LessonComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this);\n    this.state = {\n      welcomeMessage: '',\n      addComment: Boolean(false),\n      addCommentReply: Boolean(false),\n      inResponseTo: '',\n      description: \"\",\n      urgencyLevel: \"1\",\n      targetDate: moment(new Date()).format('YYYY-MM-DD'),\n      username: \"\",\n      successMessage: \"\",\n      comments: [],\n      hasReplies: Boolean(false)\n    };\n    this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.enableCommentForm = this.enableCommentForm.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n    this.displayNestedReplies = this.displayNestedReplies.bind(this);\n  }\n\n  render() {\n    let {\n      description,\n      urgencyLevel\n    } = this.state;\n    let currentTopLevelCommentID = 0;\n    let hasReplies = false;\n    let loggedInUserName = AuthenticationService.getLoggedInUserName();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Lesson\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: require('../../document.PNG'),\n          height: 700,\n          width: 600,\n          align: \"center\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.enableCommentForm(null),\n          className: \"btn \",\n          children: \"Comment on this video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), this.state.successMessage !== \"\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-success\",\n        children: this.state.successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 55\n      }, this), this.state.addComment === true && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            description,\n            urgencyLevel\n          },\n          onSubmit: this.onSubmit,\n          validateOnBlur: false,\n          validateOnChange: false // validate={this.validate}\n          ,\n          enableReinitialize: true,\n          children: props => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"description\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 37\n            }, this), loggedInUserName.includes(\"Student\", 0) && /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Urgency level\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control\",\n                as: \"select\" // onChange={this.onItemTypeDropdownSelected}\n                ,\n                name: \"urgencyLevel\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"3\",\n                  children: \"High\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"2\",\n                  children: \"Medium\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"1\",\n                  children: \"Low\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 42\n            }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Comment Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control\",\n                type: \"text\",\n                name: \"description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              type: \"submit\",\n              children: \"Add comment to lesson\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 53\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.comments.map(comment => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [comment.inResponseTo === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            align: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 54\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 63\n            }, this), currentTopLevelCommentID = comment.id, /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"card-title\",\n              children: [\" \", comment.username, \" - (comment id: \", comment.id, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              style: \"color:red\",\n              children: comment.urgencyLevel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: comment.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary btn-sm\",\n              onClick: () => this.enableCommentForm(comment.id),\n              children: \"Reply to above comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 45\n            }, this), this.state.addCommentReply === true && this.state.inResponseTo == comment.id && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container\",\n              children: /*#__PURE__*/_jsxDEV(Formik, {\n                initialValues: {\n                  description,\n                  urgencyLevel\n                },\n                onSubmit: this.onSubmit,\n                validateOnBlur: false,\n                validateOnChange: false // validate={this.validate}\n                ,\n                enableReinitialize: true,\n                children: props => /*#__PURE__*/_jsxDEV(Form, {\n                  children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n                    name: \"description\",\n                    component: \"div\",\n                    className: \"alert alert-warning\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 156,\n                    columnNumber: 69\n                  }, this), comment.username.includes(\"Student\", 0) && /*#__PURE__*/_jsxDEV(\"fieldset\", {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Urgency level\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 162,\n                      columnNumber: 77\n                    }, this), /*#__PURE__*/_jsxDEV(Field, {\n                      className: \"form-control\",\n                      as: \"select\" // onChange={this.onItemTypeDropdownSelected}\n                      ,\n                      name: \"urgencyLevel\",\n                      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"3\",\n                        children: \"High\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 169,\n                        columnNumber: 81\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"2\",\n                        children: \"Medium\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 170,\n                        columnNumber: 81\n                      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: \"1\",\n                        children: \"Low\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 171,\n                        columnNumber: 81\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 163,\n                      columnNumber: 77\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 161,\n                    columnNumber: 74\n                  }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n                    className: \"form-group\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      children: \"Comment Description\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 177,\n                      columnNumber: 73\n                    }, this), /*#__PURE__*/_jsxDEV(Field, {\n                      className: \"form-control\",\n                      type: \"text\",\n                      name: \"description\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 178,\n                      columnNumber: 73\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 69\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-success\",\n                    type: \"submit\",\n                    children: \"Reply\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 69\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 65\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 53\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 50\n            }, this)]\n          }, comment.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 42\n          }, this), (() => {\n            if (comment.id == currentTopLevelCommentID) {\n              return this.displayNestedReplies(comment.id, 10);\n            } //                                 if (comment.id == currentTopLevelCommentID) {\n            //                                     var secondLevelComments = this.displayNestedReplies(currentTopLevelCommentID)\n            //                                     // var combinedReplies = this.displayNestedReplies(comment.id)\n            //                                     if (secondLevelComments.length > 0) {\n            //                                         hasReplies = true\n            //                                     } else {\n            //                                         hasReplies = false\n            //                                     }\n            //                                     return (secondLevelComments.map(comment =>\n            //                                         <>\n            //                                             <h5 className=\"card-title\"> {comment.username} - (comment id: {comment.id}) replied to top-level comment id: {currentTopLevelCommentID} </h5>\n            //                                             <p className=\"card-text\">{comment.description}</p>\n            //                                             <button className=\"btn btn-primary btn-sm\" onClick={() =>\n            //                                                 this.enableCommentForm(comment.id)}>Reply to above comment</button>\n            //                                             {(this.state.addCommentReply === true && this.state.inResponseTo == comment.id) &&\n            //                                                 (<div className=\"container\">\n            //                                                     <Formik\n            //                                                         initialValues={{ description }}\n            //                                                         onSubmit={this.onSubmit}\n            //                                                         validateOnBlur={false}\n            //                                                         validateOnChange={false}\n            //                                                         // validate={this.validate}\n            //                                                         enableReinitialize={true}\n            //                                                     >\n            //                                                         {\n            //                                                             (props) => (\n            //                                                                 <Form>\n            //                                                                     <ErrorMessage name=\"description\" component=\"div\"\n            //                                                                         className=\"alert alert-warning\" />\n            //                                                                     {/* <ErrorMessage name=\"inResponseTo\" component=\"div\"\n            // className=\"alert alert-warning\" /> */}\n            //                                                                     <fieldset className=\"form-group\">\n            //                                                                         <label>Comment Description</label>\n            //                                                                         <Field className=\"form-control\" type=\"text\" name=\"description\" />\n            //                                                                     </fieldset>\n            //                                                                     {/* <fieldset className=\"form-group\">\n            // <label>In response to</label>\n            // <Field className=\"form-control\" type=\"number\" name=\"inResponseTo\" />\n            // </fieldset> */}\n            //                                                                     <button className=\"btn btn-success\" type=\"submit\">Reply</button>\n            //                                                                 </Form>\n            //                                                             )\n            //                                                         }\n            //                                                     </Formik>\n            //                                                 </div>\n            //                                                 )\n            //                                             }\n            //                                         </>\n            //                                     ))\n            //                                 }\n\n          })()]\n        }, void 0, true))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n  displayNestedReplies(commentIDToBeRepliedTo, spacing) {\n    //commentIDToBeRepliedTo\n    var comments = this.state.comments; //terminating recursive condition: when no more comments are replies to any upper level comments\n\n    var commentReplies = [];\n    console.log(\"commentIDToBeRepliedTo: \" + commentIDToBeRepliedTo);\n\n    for (var i = 0; i < comments.length; i++) {\n      var singleComment = comments[i];\n\n      if (singleComment.inResponseTo == commentIDToBeRepliedTo) {\n        commentReplies.push(singleComment);\n        console.log(\"singleComment.id: \" + singleComment.id);\n      }\n    }\n\n    if (commentReplies.length > 0) {\n      let {\n        description,\n        urgencyLevel\n      } = this.state;\n      return commentReplies.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: spacing + 'rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"card-title\",\n          children: [\" \", comment.username, \" - (comment id: \", comment.id, \") replied to  comment id: \", commentIDToBeRepliedTo, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: comment.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary btn-sm\",\n          onClick: () => this.enableCommentForm(comment.id),\n          children: \"Reply to above comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 21\n        }, this), (() => {\n          let username = comment.username;\n        })(), this.state.addCommentReply === true && this.state.inResponseTo == comment.id && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(Formik, {\n            initialValues: {\n              description,\n              urgencyLevel\n            },\n            onSubmit: this.onSubmit,\n            validateOnBlur: false,\n            validateOnChange: false // validate={this.validate}\n            ,\n            enableReinitialize: true,\n            children: props => /*#__PURE__*/_jsxDEV(Form, {\n              children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n                name: \"description\",\n                component: \"div\",\n                className: \"alert alert-warning\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 45\n              }, this), comment.username.includes(\"Student\", 0) && /*#__PURE__*/_jsxDEV(\"fieldset\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Urgency level\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  className: \"form-control\",\n                  as: \"select\" // onChange={this.onItemTypeDropdownSelected}\n                  ,\n                  name: \"urgencyLevel\",\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"3\",\n                    children: \"High\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 369,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"2\",\n                    children: \"Medium\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 370,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"1\",\n                    children: \"Low\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 371,\n                    columnNumber: 57\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 50\n              }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Comment Description\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(Field, {\n                  className: \"form-control\",\n                  type: \"text\",\n                  name: \"description\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 377,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success\",\n                type: \"submit\",\n                children: \"Reply\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 26\n        }, this), (() => {\n          return this.displayNestedReplies(comment.id, spacing + 2);\n        })()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }, this));\n    } else {\n      return;\n    }\n  }\n\n  enableCommentForm(commentID) {\n    if (commentID === null) {\n      //Creating comment for video\n      this.setState({\n        addComment: !this.state.addComment\n      });\n    } else {\n      //Creating reply to comment\n      console.log(\"in enableCommentForm \" + commentID);\n      this.setState({\n        addCommentReply: !this.state.addCommentReply,\n        inResponseTo: parseInt(commentID)\n      });\n    }\n\n    console.log(\"addCommentReply \" + this.state.addCommentReply); // console.log(\"inResponseTo\" + this.state.inResponseTo)\n  }\n\n  componentDidMount() {\n    //Hide comment form when refreshing/first landing on this page\n    this.setState({\n      addComment: false,\n      addCommentReply: false,\n      username: AuthenticationService.getLoggedInUserName()\n    });\n    console.log(\"componentDidMount\");\n    this.refreshComments();\n    console.log(this.state);\n  }\n\n  refreshComments() {\n    let username = AuthenticationService.getLoggedInUserName();\n    CommentDataService.retrieveAllComments(username).then(response => {\n      // console.log(response)\n      this.setState({\n        comments: response.data\n      });\n    });\n  } //When Updating(PUT) or Creating(POST) comments\n\n\n  onSubmit(values) {\n    console.log(\"Urgency level: \" + values.urgencyLevel);\n    let username = AuthenticationService.getLoggedInUserName(); // console.log(\"state.id\" + this.state.id);\n\n    if (this.state.addComment === true && this.state.addCommentReply === false) {\n      console.log(\"username: \" + username);\n      console.log(\"replying to lesson\");\n      CommentDataService.createComment(username, {\n        //Use state values for those which are carried over from ListComments\n        //Use values. if obtained from Formik.\n        //\n        id: -1,\n        description: values.description,\n        urgencyLevel: values.urgencyLevel,\n        inResponseTo: 0,\n        //Set inResponseTo to 0 for all top-level replies to a lesson; vary when replying to a comment\n        targetDate: this.state.targetDate,\n        username: this.state.username\n      }).then( //When successfully update redirect user to list all Comments\n      () => {\n        // this.props.navigate(\"/comments\")\n        console.log(\"add lesson comment success\");\n        this.setState({\n          successMessage: \"Add lesson comment success\"\n        });\n        this.componentDidMount();\n      }).catch(error => this.setState({\n        successMessage: error.response.data.message\n      }));\n    }\n\n    if (this.state.addComment === false && this.state.addCommentReply === true) {\n      console.log(\"replying to comment\");\n      console.log(\"username: \" + username);\n      CommentDataService.createComment(username, {\n        //Use state values for those which are carried over from ListComments\n        //Use values. if obtained from Formik.\n        //\n        id: -1,\n        description: values.description,\n        urgencyLevel: values.urgencyLevel,\n        inResponseTo: this.state.inResponseTo,\n        //Set inResponseTo to 0 for all top-level replies to a lesson; vary when replying to a comment\n        targetDate: this.state.targetDate,\n        username: this.state.username\n      }).then( //When successfully replied to comment\n      () => {\n        // this.props.navigate(\"/comments\")\n        console.log(\"replying to comment success\");\n        this.setState({\n          successMessage: \"replying to comment success\"\n        });\n        this.componentDidMount();\n      }).catch(error => this.setState({\n        successMessage: error.response.data.message\n      }));\n    }\n\n    console.log(\"in onSubmit\");\n  } //Validation on form fields\n\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = \"Enter a description\";\n    } else if (values.description.length < 5) {\n      errors.description = \"Enter at least 5 characters in description\";\n    } //IMPORTANT!!!!!!!!!!!!!!!!!\n    //DO CHECK FOR NUMBERS FOR INRESPONSETO FIELD\n    //\n    // if (values.inResponseTo.length < 10) {\n    //     errors.inResponseTo = \"Enter a valid name of person that you're responding to\"\n    // }\n\n\n    return errors;\n  }\n\n  retrieveWelcomeMessage() {\n    // HelloWorldService.executeHelloWorldService()\n    // .then(response => this.handleSuccessfulResponse(response))\n    // HelloWorldService.executeHelloWorldBeanService()\n    // .then(response => this.handleSuccessfulResponse(response))\n    HelloWorldService.executeHelloWorldPathVariableService(this.props.params.name).then(response => this.handleSuccessfulResponse(response)).catch(error => this.handleError(error));\n  }\n\n  handleSuccessfulResponse(response) {\n    console.log(response);\n    this.setState({\n      welcomeMessage: response.data.message\n    });\n  }\n\n  handleError(error) {\n    console.log(error.response);\n    this.setState({\n      welcomeMessage: error.response.data.message\n    });\n  }\n\n}\n\nexport default LessonComponent;","map":{"version":3,"names":["React","Component","Link","Formik","Field","Form","ErrorMessage","moment","AuthenticationService","CommentDataService","parse","CommentComponent","LessonComponent","constructor","props","retrieveWelcomeMessage","bind","state","welcomeMessage","addComment","Boolean","addCommentReply","inResponseTo","description","urgencyLevel","targetDate","Date","format","username","successMessage","comments","hasReplies","handleSuccessfulResponse","handleError","enableCommentForm","onSubmit","validate","displayNestedReplies","render","currentTopLevelCommentID","loggedInUserName","getLoggedInUserName","require","includes","map","comment","id","commentIDToBeRepliedTo","spacing","commentReplies","console","log","i","length","singleComment","push","marginLeft","commentID","setState","parseInt","componentDidMount","refreshComments","retrieveAllComments","then","response","data","values","createComment","catch","error","message","errors","HelloWorldService","executeHelloWorldPathVariableService","params","name"],"sources":["C:/Users/WJ/Desktop/Georgia Tech/Fall 2022/CS 8803 MAS (Special Topics) - Mobile Applications and Services/Assignment/mooc-app/mooc-app/src/components/mooc/LessonComponent.jsx"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik'\r\nimport moment from 'moment/moment'\r\nimport AuthenticationService from './AuthenticationService'\r\nimport CommentDataService from '../../api/comment/CommentDataService.js'\r\nimport parse from 'html-react-parser';\r\nimport CommentComponent from './CommentComponent'\r\n\r\nclass LessonComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this)\r\n        this.state = {\r\n            welcomeMessage: '',\r\n            addComment: Boolean(false),\r\n            addCommentReply: Boolean(false),\r\n            inResponseTo: '',\r\n            description: \"\",\r\n            urgencyLevel: \"1\",\r\n            targetDate: moment(new Date()).format('YYYY-MM-DD'),\r\n            username: \"\",\r\n            successMessage: \"\",\r\n            comments: [],\r\n            hasReplies: Boolean(false)\r\n        }\r\n        this.handleSuccessfulResponse = this.handleSuccessfulResponse.bind(this)\r\n        this.handleError = this.handleError.bind(this)\r\n        this.enableCommentForm = this.enableCommentForm.bind(this)\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.validate = this.validate.bind(this)\r\n        this.displayNestedReplies = this.displayNestedReplies.bind(this)\r\n    }\r\n\r\n    render() {\r\n\r\n        let { description, urgencyLevel } = this.state\r\n        let currentTopLevelCommentID = 0\r\n        let hasReplies = false\r\n        let loggedInUserName = AuthenticationService.getLoggedInUserName()\r\n        return (\r\n            <>\r\n                <h1>Lesson</h1>\r\n                <div className=\"container\">\r\n                    <img src={require('../../document.PNG')} height={700} width={600} align=\"center\" />\r\n\r\n                </div>\r\n                <div className=\"container\">\r\n\r\n                    <button onClick={() =>\r\n                        this.enableCommentForm(null)} className=\"btn \">Comment on this video</button>\r\n                </div>\r\n\r\n                <div className=\"container\" >\r\n                    <br></br>\r\n                </div>\r\n\r\n\r\n                {this.state.successMessage !== \"\" && (<div className=\"alert alert-success\">\r\n                    {this.state.successMessage}\r\n                </div>)}\r\n\r\n\r\n\r\n                {/* {Comment form to reply to lesson} */}\r\n                {this.state.addComment === true && (<div className=\"container\">\r\n\r\n\r\n                    <Formik\r\n                        initialValues={{ description, urgencyLevel }}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnBlur={false}\r\n                        validateOnChange={false}\r\n                        // validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                        className=\"alert alert-warning\" />\r\n                                    {/* <ErrorMessage name=\"inResponseTo\" component=\"div\"\r\n                                        className=\"alert alert-warning\" /> */}\r\n\r\n                                    {loggedInUserName.includes(\"Student\", 0) &&\r\n                                        (<fieldset className=\"form-group\">\r\n                                            <label>Urgency level</label>\r\n                                            <Field\r\n                                                className=\"form-control\"\r\n                                                as=\"select\"\r\n                                                // onChange={this.onItemTypeDropdownSelected}\r\n                                                name=\"urgencyLevel\"\r\n                                            >\r\n                                                <option value=\"3\">High</option>\r\n                                                <option value=\"2\">Medium</option>\r\n                                                <option value=\"1\">Low</option>\r\n                                            </Field>\r\n                                        </fieldset>\r\n                                        )}\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Comment Description</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                                    </fieldset>\r\n\r\n                                    {/* <fieldset className=\"form-group\">\r\n                                        <label>In response to</label>\r\n                                        <Field className=\"form-control\" type=\"number\" name=\"inResponseTo\" />\r\n                                    </fieldset> */}\r\n                                    <button className=\"btn btn-success\" type=\"submit\">Add comment to lesson</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n\r\n                    </Formik>\r\n                </div>\r\n                )}\r\n\r\n                <div>\r\n                    {/* Unpack each comment on this video to a div card  */}\r\n\r\n                    {\r\n                        this.state.comments.map(\r\n                            comment =>\r\n                                <>\r\n                                    {/* Only display comments for lesson for top level  */}\r\n                                    {comment.inResponseTo === 0 &&\r\n                                        (<div className=\"card-body\" align=\"center\" key={comment.id}>\r\n                                            {/* {console.log(\"inResponseTo: \" + comment.inResponseTo)} */}\r\n                                            <br></br><br></br><br></br>\r\n                                            {(currentTopLevelCommentID = comment.id)}\r\n                                            <h5 className=\"card-title\"> {comment.username} - (comment id: {comment.id})</h5>\r\n                                            <p className=\"card-text\" style=\"color:red\">{comment.urgencyLevel}</p>\r\n                                            <p className=\"card-text\">{comment.description}</p>\r\n                                            <button className=\"btn btn-primary btn-sm\" onClick={() =>\r\n                                                this.enableCommentForm(comment.id)}>Reply to above comment</button>\r\n                                            <div>\r\n                                                <br></br>\r\n                                            </div>\r\n\r\n                                            {(this.state.addCommentReply === true && this.state.inResponseTo == comment.id) &&\r\n                                                (<div className=\"container\">\r\n\r\n\r\n                                                    <Formik\r\n                                                        initialValues={{ description, urgencyLevel }}\r\n                                                        onSubmit={this.onSubmit}\r\n                                                        validateOnBlur={false}\r\n                                                        validateOnChange={false}\r\n                                                        // validate={this.validate}\r\n                                                        enableReinitialize={true}\r\n                                                    >\r\n                                                        {\r\n                                                            (props) => (\r\n                                                                <Form>\r\n                                                                    <ErrorMessage name=\"description\" component=\"div\"\r\n                                                                        className=\"alert alert-warning\" />\r\n                                                                    {/* <ErrorMessage name=\"inResponseTo\" component=\"div\"\r\n    className=\"alert alert-warning\" /> */}\r\n                                                                    {comment.username.includes(\"Student\", 0) &&\r\n                                                                        (<fieldset className=\"form-group\">\r\n                                                                            <label>Urgency level</label>\r\n                                                                            <Field\r\n                                                                                className=\"form-control\"\r\n                                                                                as=\"select\"\r\n                                                                                // onChange={this.onItemTypeDropdownSelected}\r\n                                                                                name=\"urgencyLevel\"\r\n                                                                            >\r\n                                                                                <option value=\"3\">High</option>\r\n                                                                                <option value=\"2\">Medium</option>\r\n                                                                                <option value=\"1\">Low</option>\r\n                                                                            </Field>\r\n                                                                        </fieldset>\r\n                                                                        )}\r\n\r\n                                                                    <fieldset className=\"form-group\">\r\n                                                                        <label>Comment Description</label>\r\n                                                                        <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                                                                    </fieldset>\r\n\r\n                                                                    {/* <fieldset className=\"form-group\">\r\n    <label>In response to</label>\r\n    <Field className=\"form-control\" type=\"number\" name=\"inResponseTo\" />\r\n    </fieldset> */}\r\n                                                                    <button className=\"btn btn-success\" type=\"submit\">Reply</button>\r\n                                                                </Form>\r\n                                                            )\r\n                                                        }\r\n\r\n                                                    </Formik>\r\n                                                </div>\r\n                                                )\r\n                                            }\r\n\r\n\r\n\r\n\r\n\r\n                                        </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                        )\r\n\r\n                                    }\r\n\r\n\r\n                                    {/*Displaying only 2nd level comments that reply to top-level comments */}\r\n                                    {(() => {\r\n                                        if (comment.id == currentTopLevelCommentID) {\r\n                                            return this.displayNestedReplies(comment.id, 10);\r\n                                        }\r\n\r\n                                        //                                 if (comment.id == currentTopLevelCommentID) {\r\n                                        //                                     var secondLevelComments = this.displayNestedReplies(currentTopLevelCommentID)\r\n                                        //                                     // var combinedReplies = this.displayNestedReplies(comment.id)\r\n                                        //                                     if (secondLevelComments.length > 0) {\r\n                                        //                                         hasReplies = true\r\n                                        //                                     } else {\r\n                                        //                                         hasReplies = false\r\n                                        //                                     }\r\n\r\n\r\n                                        //                                     return (secondLevelComments.map(comment =>\r\n                                        //                                         <>\r\n                                        //                                             <h5 className=\"card-title\"> {comment.username} - (comment id: {comment.id}) replied to top-level comment id: {currentTopLevelCommentID} </h5>\r\n                                        //                                             <p className=\"card-text\">{comment.description}</p>\r\n                                        //                                             <button className=\"btn btn-primary btn-sm\" onClick={() =>\r\n                                        //                                                 this.enableCommentForm(comment.id)}>Reply to above comment</button>\r\n\r\n\r\n                                        //                                             {(this.state.addCommentReply === true && this.state.inResponseTo == comment.id) &&\r\n                                        //                                                 (<div className=\"container\">\r\n\r\n                                        //                                                     <Formik\r\n                                        //                                                         initialValues={{ description }}\r\n                                        //                                                         onSubmit={this.onSubmit}\r\n                                        //                                                         validateOnBlur={false}\r\n                                        //                                                         validateOnChange={false}\r\n                                        //                                                         // validate={this.validate}\r\n                                        //                                                         enableReinitialize={true}\r\n                                        //                                                     >\r\n                                        //                                                         {\r\n                                        //                                                             (props) => (\r\n                                        //                                                                 <Form>\r\n                                        //                                                                     <ErrorMessage name=\"description\" component=\"div\"\r\n                                        //                                                                         className=\"alert alert-warning\" />\r\n                                        //                                                                     {/* <ErrorMessage name=\"inResponseTo\" component=\"div\"\r\n                                        // className=\"alert alert-warning\" /> */}\r\n\r\n\r\n                                        //                                                                     <fieldset className=\"form-group\">\r\n                                        //                                                                         <label>Comment Description</label>\r\n                                        //                                                                         <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                                        //                                                                     </fieldset>\r\n\r\n                                        //                                                                     {/* <fieldset className=\"form-group\">\r\n                                        // <label>In response to</label>\r\n                                        // <Field className=\"form-control\" type=\"number\" name=\"inResponseTo\" />\r\n                                        // </fieldset> */}\r\n                                        //                                                                     <button className=\"btn btn-success\" type=\"submit\">Reply</button>\r\n                                        //                                                                 </Form>\r\n                                        //                                                             )\r\n                                        //                                                         }\r\n\r\n                                        //                                                     </Formik>\r\n                                        //                                                 </div>\r\n                                        //                                                 )\r\n                                        //                                             }\r\n                                        //                                         </>\r\n                                        //                                     ))\r\n                                        //                                 }\r\n\r\n\r\n\r\n                                    })()}\r\n\r\n                                    {/*line breaks between top-level comments*/}\r\n                                    {/* {(() => {\r\n\r\n                                        if (hasReplies) {\r\n                                            return <div> <br></br><br></br><br></br></div>\r\n                                        }\r\n                                    })()} */}\r\n\r\n\r\n\r\n                                </>\r\n\r\n                        )\r\n\r\n\r\n                    }\r\n                </div>\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n    displayNestedReplies(commentIDToBeRepliedTo, spacing) {\r\n        //commentIDToBeRepliedTo\r\n\r\n        var comments = this.state.comments\r\n        //terminating recursive condition: when no more comments are replies to any upper level comments\r\n\r\n\r\n        var commentReplies = []\r\n        console.log(\"commentIDToBeRepliedTo: \" + commentIDToBeRepliedTo)\r\n        for (var i = 0; i < comments.length; i++) {\r\n            var singleComment = comments[i]\r\n\r\n            if (singleComment.inResponseTo == commentIDToBeRepliedTo) {\r\n\r\n                commentReplies.push(singleComment)\r\n                console.log(\"singleComment.id: \" + singleComment.id)\r\n            }\r\n        }\r\n\r\n\r\n\r\n        if (commentReplies.length > 0) {\r\n            let { description, urgencyLevel } = this.state;\r\n            return (commentReplies.map(comment =>\r\n\r\n\r\n                <div style={{ marginLeft: spacing + 'rem' }}>\r\n                    {/* initially style = margin-right: 1rem \r\n                https://getbootstrap.com/docs/4.0/layout/utilities-for-layout/*/}\r\n                    <h5 className=\"card-title\"> {comment.username} - (comment id: {comment.id}) replied to  comment id: {commentIDToBeRepliedTo} </h5>\r\n                    <p className=\"card-text\">{comment.description}</p>\r\n                    <button className=\"btn btn-primary btn-sm\" onClick={() =>\r\n                        this.enableCommentForm(comment.id)}>Reply to above comment</button>\r\n\r\n                    {(() => {\r\n                        let username = comment.username\r\n                    })()}\r\n\r\n                    {(this.state.addCommentReply === true && this.state.inResponseTo == comment.id) &&\r\n                        (<div className=\"container\">\r\n\r\n                            <Formik\r\n                                initialValues={{ description, urgencyLevel }}\r\n                                onSubmit={this.onSubmit}\r\n                                validateOnBlur={false}\r\n                                validateOnChange={false}\r\n                                // validate={this.validate}\r\n                                enableReinitialize={true}\r\n                            >\r\n                                {\r\n                                    (props) => (\r\n                                        <Form>\r\n                                            <ErrorMessage name=\"description\" component=\"div\"\r\n                                                className=\"alert alert-warning\" />\r\n                                            {/* <ErrorMessage name=\"inResponseTo\" component=\"div\"\r\nclassName=\"alert alert-warning\" /> */}\r\n\r\n                                            {comment.username.includes(\"Student\", 0) &&\r\n                                                (<fieldset className=\"form-group\">\r\n                                                    <label>Urgency level</label>\r\n                                                    <Field\r\n                                                        className=\"form-control\"\r\n                                                        as=\"select\"\r\n                                                        // onChange={this.onItemTypeDropdownSelected}\r\n                                                        name=\"urgencyLevel\"\r\n                                                    >\r\n                                                        <option value=\"3\">High</option>\r\n                                                        <option value=\"2\">Medium</option>\r\n                                                        <option value=\"1\">Low</option>\r\n                                                    </Field>\r\n                                                </fieldset>\r\n                                                )}\r\n                                            <fieldset className=\"form-group\">\r\n                                                <label>Comment Description</label>\r\n                                                <Field className=\"form-control\" type=\"text\" name=\"description\" />\r\n                                            </fieldset>\r\n\r\n\r\n                                            {/* <fieldset className=\"form-group\">\r\n<label>In response to</label>\r\n<Field className=\"form-control\" type=\"number\" name=\"inResponseTo\" />\r\n</fieldset> */}\r\n                                            <button className=\"btn btn-success\" type=\"submit\">Reply</button>\r\n                                        </Form>\r\n                                    )\r\n                                }\r\n\r\n                            </Formik>\r\n                        </div>\r\n                        )\r\n                    }\r\n\r\n\r\n\r\n                    {(() => {\r\n                        return this.displayNestedReplies(comment.id, spacing + 2)\r\n                    })()}\r\n                </div>\r\n\r\n\r\n            ))\r\n        } else {\r\n            return\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    enableCommentForm(commentID) {\r\n\r\n        if (commentID === null) {\r\n            //Creating comment for video\r\n            this.setState({\r\n                addComment: !this.state.addComment\r\n            })\r\n        } else {\r\n            //Creating reply to comment\r\n            console.log(\"in enableCommentForm \" + commentID)\r\n            this.setState({\r\n                addCommentReply: !this.state.addCommentReply,\r\n                inResponseTo: parseInt(commentID)\r\n            })\r\n\r\n\r\n        }\r\n        console.log(\"addCommentReply \" + this.state.addCommentReply)\r\n        // console.log(\"inResponseTo\" + this.state.inResponseTo)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //Hide comment form when refreshing/first landing on this page\r\n        this.setState({\r\n            addComment: false,\r\n            addCommentReply: false,\r\n            username:  AuthenticationService.getLoggedInUserName()\r\n        })\r\n\r\n    \r\n\r\n        console.log(\"componentDidMount\")\r\n        this.refreshComments();\r\n        console.log(this.state)\r\n    }\r\n\r\n    refreshComments() {\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        CommentDataService.retrieveAllComments(username)\r\n            .then(\r\n                response => {\r\n                    // console.log(response)\r\n                    this.setState({ comments: response.data })\r\n                }\r\n\r\n            )\r\n    }\r\n\r\n\r\n\r\n    //When Updating(PUT) or Creating(POST) comments\r\n    onSubmit(values) {\r\n        console.log(\"Urgency level: \" + values.urgencyLevel)\r\n        let username = AuthenticationService.getLoggedInUserName()\r\n        // console.log(\"state.id\" + this.state.id);\r\n        if (this.state.addComment === true && this.state.addCommentReply === false) {\r\n            console.log(\"username: \" + username)\r\n            console.log(\"replying to lesson\")\r\n            CommentDataService.createComment(username, {\r\n                //Use state values for those which are carried over from ListComments\r\n                //Use values. if obtained from Formik.\r\n                //\r\n                id: -1,\r\n                description: values.description,\r\n                urgencyLevel: values.urgencyLevel,\r\n                inResponseTo: 0, //Set inResponseTo to 0 for all top-level replies to a lesson; vary when replying to a comment\r\n                targetDate: this.state.targetDate,\r\n                username: this.state.username\r\n            }).then(\r\n                //When successfully update redirect user to list all Comments\r\n                () => {\r\n                    // this.props.navigate(\"/comments\")\r\n                    console.log(\"add lesson comment success\")\r\n                    this.setState({\r\n                        successMessage: \"Add lesson comment success\"\r\n                    })\r\n                    this.componentDidMount()\r\n                }\r\n\r\n            ).catch(\r\n                error => this.setState({\r\n                    successMessage: error.response.data.message\r\n                })\r\n            )\r\n        }\r\n\r\n        if (this.state.addComment === false && this.state.addCommentReply === true) {\r\n            console.log(\"replying to comment\")\r\n            console.log(\"username: \" + username)\r\n            CommentDataService.createComment(username, {\r\n                //Use state values for those which are carried over from ListComments\r\n                //Use values. if obtained from Formik.\r\n                //\r\n                id: -1,\r\n                description: values.description,\r\n                urgencyLevel: values.urgencyLevel,\r\n                inResponseTo: this.state.inResponseTo, //Set inResponseTo to 0 for all top-level replies to a lesson; vary when replying to a comment\r\n                targetDate: this.state.targetDate,\r\n                username: this.state.username\r\n            }).then(\r\n                //When successfully replied to comment\r\n                () => {\r\n                    // this.props.navigate(\"/comments\")\r\n                    console.log(\"replying to comment success\")\r\n                    this.setState({\r\n                        successMessage: \"replying to comment success\"\r\n                    })\r\n                    this.componentDidMount()\r\n                }\r\n\r\n            ).catch(\r\n                error => this.setState({\r\n                    successMessage: error.response.data.message\r\n                })\r\n            )\r\n        }\r\n        console.log(\"in onSubmit\")\r\n    }\r\n\r\n\r\n\r\n\r\n    //Validation on form fields\r\n    validate(values) {\r\n        let errors = {}\r\n        if (!values.description) {\r\n            errors.description = \"Enter a description\"\r\n        } else if (values.description.length < 5) {\r\n            errors.description = \"Enter at least 5 characters in description\"\r\n        }\r\n\r\n        //IMPORTANT!!!!!!!!!!!!!!!!!\r\n        //DO CHECK FOR NUMBERS FOR INRESPONSETO FIELD\r\n\r\n\r\n        //\r\n        // if (values.inResponseTo.length < 10) {\r\n        //     errors.inResponseTo = \"Enter a valid name of person that you're responding to\"\r\n\r\n        // }\r\n\r\n\r\n        return errors\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    retrieveWelcomeMessage() {\r\n        // HelloWorldService.executeHelloWorldService()\r\n        // .then(response => this.handleSuccessfulResponse(response))\r\n        // HelloWorldService.executeHelloWorldBeanService()\r\n        // .then(response => this.handleSuccessfulResponse(response))\r\n        HelloWorldService.executeHelloWorldPathVariableService(this.props.params.name)\r\n            .then(response => this.handleSuccessfulResponse(response))\r\n            .catch(error => this.handleError(error))\r\n    }\r\n\r\n    handleSuccessfulResponse(response) {\r\n        console.log(response)\r\n        this.setState({ welcomeMessage: response.data.message })\r\n    }\r\n\r\n    handleError(error) {\r\n        console.log(error.response)\r\n        this.setState({ welcomeMessage: error.response.data.message })\r\n    }\r\n\r\n}\r\nexport default LessonComponent"],"mappings":"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"},"metadata":{},"sourceType":"module"}